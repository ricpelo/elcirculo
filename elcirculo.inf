!% -~S
!% -G
!% +language_name=Spanish
!% $MAX_STATIC_DATA=20000
!% $MAX_PROP_TABLE_SIZE=63840
!% $MAX_VERBS=200
!% $MAX_ZCODE_SIZE=45000
!% $MAX_VERBSPACE=4500

!
! EL CÍRCULO
!
! Copyright (c) 2012 Ricardo Pérez López (Alpha Aventuras)
!

! This program is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! This program is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.


!===============================================================================
! (1) Constantes; Variables Globales; Replaces; Propertys; Incluir Parser.h
!-------------------------------------------------------------------------------


! ====================================================================
! CONSTANTES
! ====================================================================


Constant Story "~EL CÍRCULO~";
Constant Headline "^(c) 2012 Alpha Aventuras^^
                  Teclea CRÉDITOS si quieres saber más acerca de la aventura, o
                  AYUDA cuando estés bloqueado.^";
Release 1;

! Queremos usar el comando 'Salidas'
Constant ADMITIR_COMANDO_SALIDAS;
! No queremos usar los comandos 'Lugares' y 'Objetos'
Constant NO_PLACES;
! No queremos usar puntuación
Constant NO_SCORE;
! Queremos que se muestren las deducciones del parser
!Constant IMPRIMIR_DEDUCCIONES;
! Hay curiosidades al final del juego
Constant AMUSING_PROVIDED;

! Alturas de los gráficos:
Constant GRAFICOS_MINUSCULOS = 200;
Constant GRAFICOS_PEQUENOS   = 250;
Constant GRAFICOS_MEDIANOS   = 350;
Constant GRAFICOS_GRANDES    = 450;

Constant CANAL_FONDO = 9; Constant VOLUMEN_FONDO = 50;
Constant CANAL_TV = 0; Constant VOLUMEN_TV = 100;
Constant CANAL_TELEFONO = 1; Constant VOLUMEN_TELEFONO = 100;

! Vamos a usar Damusix junto con SGW+DMX
Constant SGW_CON_DAMUSIX;
Constant SONIDO_BUCLE_INFINITO = -1;

! El color de fondo de la ventana gráfica es negro:
Constant CLR_GG_PERSBACK = CLR_GG_BLACK;

Constant TIMER_TICK = 1000;
Constant TIMER_DURACION_TLF_KATIE = 6;
Constant TIMER_DURACION_BECCA = 5;


! ====================================================================
! VARIABLES GLOBALES
! ====================================================================


! Alto de la ventana gráfica:
Global altoVentanaGrafica = GRAFICOS_MEDIANOS;

! Hay gráficos o no:
Global hayGraficos = true;

! Hay sonidos:
Global haySonido = true;
Global haySonidoFondo = true;

! Hay eventos en tiempo real:
Global hayTiempoReal = true;

! Hay efecto de teletipo:
Global hayTeletipo = false;

! Si se ha activado el listado automático de salidas:
Global mostrarSalidas = true;

! Se pone a true y false en la rutina PermitirEmpujarDir, y luego se consulta en
! MensajesLibreria:
Global estoyEmpujando = false;

! Interruptor de pistas:
Global hayPistas = 0;

! Interruptor para indicar si hay que dibujar o no la línea de estado
! (ver rutina Inicialise):
Global dibujarEstado = false;

! La imagen que representa la oscuridad:
Global SGW_IMAGEN_OSCURIDAD = Oscuridad_jpg;


! ====================================================================
! REPLACES
! ====================================================================


! Nuestra versión de esta rutina sólo redibuja la línea de estado cuando
! la variable global dibujarEstado está a true:
Replace DrawStatusLine;

! En este juego no se usa el BuscarEn (MIRA EN, BUSCA EN/DENTRO/DE/SOBRE,
! REGISTRA...):
Replace SearchSub;

! En este juego no se usa el Consultar (CONSULTA, LEE, BUSCA EN x SOBRE y...):
Replace ConsultSub;

! En este juego no se habla, ni se responde, ni se dice:
Replace TellSub;
Replace AnswerSub;
Replace DecirSub;

! Con el siguiente Replace conseguimos que el objeto empujado hacia una
! dirección aparezca en la descripción de la localidad de destino del "empuje":
Replace AllowPushDir;

! Ponemos nuestra propia versión de ZIPI_RunMenu y ZIPI_RunOtro,
! para el menú principal y las pistas:
Replace ZIPI_RunMenu;
Replace ZIPI_RunOtro;

! Nuestra versión elimina también los signos de admiración e interrogación:
Replace QuitarAcentos;

Replace InitGlkWindow;
Replace HandleGlkEvent;

! Usamos el ParseNoun de IntNombre_NG:
Replace ParseNoun;

! Lo pide Timer.h:
Replace KeyDelay;

Include "Parser";


!===============================================================================
! (2) Puntos de Entrada para Glk [solo en Glulx]:
!     - InitGlkWindow(), IdentifyGlkObject(), HandleGlkEvent()
!-------------------------------------------------------------------------------


[ IdentifyGlkObject fase tipo ref rock;
  SGW_IdentifyGlk(fase,tipo,ref,rock);
  Damusix.IdentificarSonidos(fase);
!  Mapa_IdentifyGlkObject(fase, tipo, ref, rock);
];


[ InitGlkWindow winrock;
  switch (winrock) {
    GG_MAINWIN_ROCK:
      glk_stylehint_set(wintype_TextBuffer, style_Normal,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextBuffer, style_Normal,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_Normal,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Normal,
                        stylehint_Weight, 0);
      glk_stylehint_set(wintype_TextBuffer, style_Normal,
                        stylehint_Proportional, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Normal,
                        stylehint_Justification, stylehint_just_LeftRight);

      glk_stylehint_set(wintype_TextBuffer, style_Input,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextBuffer, style_Input,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_Input,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Input,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextBuffer, style_Input,
                        stylehint_Weight, 1);

      ! Esta será mi negrita:
      glk_stylehint_set(wintype_TextBuffer, style_User1,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextBuffer, style_User1,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_User1,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_User1,
                        stylehint_Proportional, 1);
      glk_stylehint_set(wintype_TextBuffer, style_User1,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextBuffer, style_User2,
                        stylehint_TextColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_User2,
                        stylehint_BackColor, $00ff00);
      glk_stylehint_set(wintype_TextBuffer, style_User2,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_User2,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextBuffer, style_User2,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextBuffer, style_Alert,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextBuffer, style_Alert,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_Alert,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Alert,
                        stylehint_Proportional, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Alert,
                        stylehint_Oblique, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Alert,
                        stylehint_Weight, 1);
 
      glk_stylehint_set(wintype_TextBuffer, style_Emphasized,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextBuffer, style_Emphasized,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_Emphasized,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Emphasized,
                        stylehint_Proportional, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Emphasized,
                        stylehint_Oblique, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Emphasized,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextBuffer, style_Preformatted,
                        stylehint_TextColor, $00aa00);
      glk_stylehint_set(wintype_TextBuffer, style_Preformatted,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_Preformatted,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Preformatted,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextBuffer, style_Preformatted,
                        stylehint_Weight, 0);

      glk_stylehint_set(wintype_TextBuffer, style_Header,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextBuffer, style_Header,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_Header,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_Header,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextBuffer, style_Subheader,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextBuffer, style_Subheader,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_SubHeader,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextBuffer, style_SubHeader,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextBuffer, style_Note,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextBuffer, style_Note,
                        stylehint_BackColor, $000000);

      glk_stylehint_set(wintype_TextBuffer, style_BlockQuote,
                        stylehint_TextColor, $000000);
      glk_stylehint_set(wintype_TextBuffer, style_BlockQuote,
                        stylehint_BackColor, $ffffff);


      glk_stylehint_set(wintype_TextGrid, style_Normal,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextGrid, style_Normal,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_Normal,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_Normal,
                        stylehint_Weight, 0);
      glk_stylehint_set(wintype_TextGrid, style_Normal,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_Normal,
                        stylehint_Justification, stylehint_just_LeftRight);
         
      glk_stylehint_set(wintype_TextGrid, style_Input,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextGrid, style_Input,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_Input,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_Input,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_Input,
                        stylehint_Weight, 1);
 
      glk_stylehint_set(wintype_TextGrid, style_User1,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextGrid, style_User1,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_User1,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_User1,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_User1,
                        stylehint_Weight, 1);
  
      glk_stylehint_set(wintype_TextGrid, style_User2,
                        stylehint_TextColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_User2,
                        stylehint_BackColor, $00ff00);
      glk_stylehint_set(wintype_TextGrid, style_User2,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_User2,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_User2,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextGrid, style_Alert,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextGrid, style_Alert,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_Alert,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_Alert,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_Alert,
                        stylehint_Oblique, 1);
      glk_stylehint_set(wintype_TextGrid, style_Alert,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_Oblique, 1);
      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_Weight, 1);
      glk_stylehint_set(wintype_TextGrid, style_Emphasized,
                        stylehint_Justification, stylehint_just_LeftRight);

      glk_stylehint_set(wintype_TextGrid, style_Preformatted,
                        stylehint_TextColor, $00aa00);
      glk_stylehint_set(wintype_TextGrid, style_Preformatted,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_Preformatted,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_Preformatted,
                        stylehint_Proportional, 0);
      glk_stylehint_set(wintype_TextGrid, style_Preformatted,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextGrid, style_Header,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextGrid, style_Header,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_Header,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_Header,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextGrid, style_Subheader,
                        stylehint_TextColor, $00ff00);
      glk_stylehint_set(wintype_TextGrid, style_Subheader,
                        stylehint_BackColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_SubHeader,
                        stylehint_Size, 1);
      glk_stylehint_set(wintype_TextGrid, style_SubHeader,
                        stylehint_Weight, 1);

      glk_stylehint_set(wintype_TextGrid, style_Note,
                        stylehint_TextColor, $ffffff);
      glk_stylehint_set(wintype_TextGrid, style_Note,
                        stylehint_BackColor, $000000);

      glk_stylehint_set(wintype_TextGrid, style_BlockQuote,
                        stylehint_TextColor, $000000);
      glk_stylehint_set(wintype_TextGrid, style_BlockQuote,
                        stylehint_BackColor, $ffffff);
  }

  rfalse; ! si te olvidas esta linea, el juego no funcionará bien
];


[ HandleGlkEvent ev context buffer;
  SGW_HandleGlk(ev);
  ControlTimer.CT_HandleGlkEvent(ev, context, buffer);
!  Mapa_HandleGlkEvent(ev, context, buffer);
];


!===============================================================================
! (3) Modificar Mensajes de la Libreria; Otros Includes; Incluir VerbLib.h
!-------------------------------------------------------------------------------


Include "Rastros_NG";


Object LibraryMessages
  with
    before [;
!      Look:
!        ! Copiamos el código de Mensajes.h. Sólo cambiamos el segundo
!        ! EscribirListaDesde, para que cuando se deje en el suelo la
!        ! linterna, no diga: "Puedes ver una linterna (en la que ves una batería)."
!        switch (lm_n) {
!          1: print " (sobre ", (the) lm_o, ")";
!          2: print " (en ", (the) lm_o, ")";
!          3: print " (como ", (object) lm_o, ")";
!          4: print "^Sobre ", (the) lm_o;
!             WriteListFrom(child(lm_o), ENGLISH_BIT + RECURSE_BIT +
!                           PARTINV_BIT + TERSE_BIT + ISARE_BIT + CONCEAL_BIT);
!             ".";
!          default:
!            if (lm_o ~= location) {
!              if (lm_o has supporter)
!                print "^Sobre ";
!              else
!                print "^En ";
!              print (the) lm_o;
!              print " puedes ver ";
!            } else
!              print "^También puedes ver ";
!            if (n == 5) print "también ";    ! ?????
!            ! Quitamos RECURSIVO_BIT e INFOPARCIAL_BIT:
!            WriteListFrom(child(lm_o), ENGLISH_BIT + WORKFLAG_BIT +
!                          TERSE_BIT + CONCEAL_BIT);
!            if (lm_o ~= location) ".";
!            ".";
!        }

      Prompt:
        ImprimirPrompt();
        rtrue;

      Go:
        switch (lm_n) {
          2: if (estoyEmpujando)
               "^No ", (puedes_) " seguir empujando porque no hay salida
               hacia ", (the) noun, ".";
             "No ", (puedes_) " ir por ahí, porque no hay salida hacia ",
              (the) noun, ".";
          5: if (estoyEmpujando)
               "^No ", (puedes_) " empujar nada a través ", (del) lm_o, ".";
             "No ", (puedes_) " pasar a través ", (del) lm_o, ".";
        }
        
      Take:
        if (lm_n == 1) {
          print "Reco";
          if (player.persona == PRIMERA_PERSONA + PERSONA_SINGULAR) print "j";
          else                                                      print "g";
          print (es_) " ";
          if (lm_o has moved) print (the) lm_o;
          else                print (a) lm_o;
          ".";
        }

      Drop:
        if (lm_n == 4) "Dej", (as_) " ", (the) lm_o, ".";

      Remove:
        if (lm_n == 3) {
          if (verb_word == 'quita') {
            "Quit", (as_) " ", (the) lm_o, " ", (del) second, ".";
          } else {
            "Sac", (as_) " ",  (the) lm_o, " ", (del) second, ".";
          }
        }
      Miscellany:
        switch (lm_n) {
           4: TextoLlamativo(" ¡Enhorabuena! Has acabado la aventura ");
              rtrue;
          10: rtrue;
          13: ! Reactivamos timer en caso de UNDO:
              ControlTimer.ReactivarTick();
              "[Retrocediendo al turno anterior.]";
          17: switch (random(4)) {
                1: "Está muy oscuro y no puedes ver nada.";
                2: "Todo está demasiado oscuro y no aprecias nada con
                    claridad.";
                3: "La oscuridad te impide ver dónde te encuentras.";
                4: "Te mueves a tientas a través de una oscuridad que te impide
                    ver nada.";
              }
          19: "Has tenido días mejores...";
          30: switch (random(3)) {
                1: "No encuentro eso que dices.";
                2: "No veo nada parecido por aquí.";
                3: "Parece que no hay nada de eso.";
              };
          27: "Las palabras se te agolpan en los labios.";
          38: switch (random(5)) {
                1: "¿Qué quieres decir con eso?";
                2: "Lo siento, no te entiendo.";
                3: "Intenta ser un poco más preciso.";
                4: "No comprendo eso que dices.";
                5: "¿Qué intentas decir?";
              }
        }
    ];


! Hay que definirla antes de incluir Moviles_NG:
Class Lugar
  class LugarConRastro
  with
!   sgw_mus Estancia_ogg,
!   sgw_vol VOLUMEN_FONDO,
    describe [;
      PrintOrRun(self, description);
      if (mostrarSalidas) {
        print "^";
        glk_set_style(style_Emphasized);
        <Salidas>;
        glk_set_style(style_Normal);
        rtrue;
      }
    ],
    number,
    dibujado false,                   ! Necesario para Mapeador.h
    before [;
      Examine, Touch:
        if (noun == d_obj) {          ! Examinamos el suelo
          "No observas nada en especial al mirar al suelo.";
        } else if (noun == u_obj) {   ! Examinamos el techo
          "No observas nada en especial al mirar al techo.";
        }        
    ],
  has
    light;

    
Include "SGW+DMX_NG";       ! Entre EParser y Acciones
Include "elcirculo.bli";    ! Los recursos multimedia de la aventura
Include "VerbLib";
Include "Barra";            ! Barra de estado personalizable
Include "Moviles_NG";       ! La librería Moviles retocada por mí
Include "PNJpuertas_NG";    ! La librería PnjPuertas retocada por mí (muy poco)
Include "PNJactor_NG";      ! Librerías que hacen que un PNJ pueda coger y dejar
Include "PNJacciones_NG";   ! Poner detrás de Moviles y PnjPuertas
Include "Etemas";           ! Los temas de conversación
Include "Decorado_NG";      ! Objetos de decorado
Include "ExaminarFalso";    ! Poder examinar objetos sólo con su nombre
Include "Teletipo";         ! Teletipo para sacar mensajes letra a letra
Include "Pistas";           ! Las pistas creadas con ZIPI
Include "Timer";            ! Mi librería de eventos temporizados
Include "IntNombre_NG";     ! Poder usar adjetivos como en InformATE
Include "EscenarioAbrible"; ! Escenario que se puede abrir y cerrar
Include "Contenedor";       ! Contenedores
Include "EventList_NG";     ! Listas de mensajes


!===============================================================================
! (4) Rutinas Initialise() e IniciarAventura()
!-------------------------------------------------------------------------------


[ Initialise r v;
!  if (KeyDelay(30)) hayTeletipo = false;
  IniciarGraficosSonidos();
  openGraphicWindow(250);
  clearGraphicWindow();
  StatusLineHeight(23);
  clearMainWindow();
  viewImageCenter(Logo_Alpha_Aventuras_Corto_jpg);
  v = Damusix.QueVolumenCanal(CANAL_FONDO);
  Damusix.AsignarCanal(Darkwalk_ogg, CANAL_FONDO, v, SONIDO_BUCLE_INFINITO);
  Damusix.Tocar(Darkwalk_ogg);
  ZIPI_Intro();
.Menu;
  r = ZIPI_RunMenu(ZIPI_Menu_Principal, true);
  if (r == 3) jump Menu;
  if (r ~= 2) quit;
  StatusLineHeight(1);
  if (hayGraficos) EncenderGraficos();
  else             ApagarGraficos();
  clearTextWindow();
];


[ IniciarAventura logo;
  location = thedark;

  dibujarEstado = false;

  ! Esto es para que el juego dé siempre la descripción de la habitación, aunque
  ! ya la hayamos visitado
  lookmode = 2;

  ! Inventario en una sola frase
  inventory_style = ENGLISH_BIT + RECURSE_BIT + FULLINV_BIT;

  ! Parseado estricto (de la librería IntNombre):
  parseado_estricto = 1;

  ! Nombre de la oscuridad
  thedark.short_name = "Zona de oscuridad";
  
  ! Localización donde comienza el jugador
  location = cuarto_katie;

!  AsignarPersona(PRIMERA_PERSONA + PERSONA_SINGULAR);
  give player female;

  clearTextWindow();

  IniciarMoviles();
  IniciarPuertas();
  IniciarRastros();

  if (logo) {
    clearGraphicWindow();
!    DibujaLogoAlien();
  }

  Damusix.PararCanal(CANAL_FONDO);
  sonido_telefono_katie.sonar();
  timer_telefono_katie.AsignarGestor(1);
  timer_becca.AsignarGestor(2);
  ControlTimer.ActivarTick(TIMER_TICK);
  PNJ_Ruta(becca, MOVIMIENTO_PERSEGUIR, player);
  KeyDelay();
];


!===============================================================================
! (5) Rutinas de la Libreria Implementadas, Reemplazadas o Ampliadas
!-------------------------------------------------------------------------------


[ InScope;
  ! Así le podemos pedir a Becca que coja el teléfono aunque el teléfono no
  ! esté presente:
  if (actor == becca && LugarReal() ofclass LugarCasaKatie) {
    PlaceInScope(telefono_katie);
  }
  rfalse;
];


[ Amusing;
  rfalse;
];


[ DrawStatusLine;
  if (dibujarEstado) {
    barra_estado.dibujar();
  }
];


! Modificado para que ?, !, ¿, ¡ se separen de las palabras al parsear:
[ QuitarAcentos buffer parse x i word at len;
  for (x = 0: x < parse-->0: x++) { ! para cada palabra
    word = tokenDict(parse, x);
    at   = tokenPos(parse, x);
    len  = WordLength(x);
    if (word == 0) { ! no comprendida
      for (i = at: i < at + len: i++)
        ! [080625] Quitados caracteres en mayúscula
        switch(buffer->i) {
          225: buffer->i = 'a';       ! 225: á
          233: buffer->i = 'e';       ! 233: é
          237: buffer->i = 'i';       ! 237: í
          243: buffer->i = 'o';       ! 243: ó
     250, 252: buffer->i = 'u';       ! 250: ú, 252: ü
          241: buffer->i = 'n';       ! 241: ñ
          '?': buffer->i = ' ';
          191: buffer->i = ' ';
          '!': buffer->i = ' ';
          161: buffer->i = ' ' ;
        }
        Tokenise__(buffer, parse);
      }
  }
];


! Modificado para que al empujar un objeto a una localidad se muestre
! más información:
[ AllowPushDir i tmp;
  if (parent(second) ~= compass) return L__M(##PushDir, 2, noun);
  if (second == u_obj or d_obj)  return L__M(##PushDir, 3, noun);
  AfterRoutines(); i = noun; move i to player;
  tmp = location;                                     ! (c) Alpha
  estoyEmpujando = true;                              ! (c) Alpha
  <Go second>;
  estoyEmpujando = false;                             ! (c) Alpha
  if (location == thedark) move i to real_location;
  else                     move i to location;
  if (tmp ~= location && location ~= thedark)
    PrintOrRun(i, describe);                          ! (c) Alpha
];


!===============================================================================
! (6) Incluir SpanishG.h; Otros Includes
!-------------------------------------------------------------------------------


Include "SpanishG";
Include "Decir";           ! Para poder usar DECIR ... A ...
!Include "Mapeador";


!===============================================================================
! (7) Clases del Juego
!-------------------------------------------------------------------------------


!Class MiTeletipo
!  class Teletipo,
!  with
!    gancho_antes [;
!!     Damusix.TocarCanal(CANAL_TELETIPO);
!    ],
!    gancho_despues [;
!!     Damusix.PararCanal(CANAL_TELETIPO);
!    ];


Class LugarCasaKatie
  class Lugar
  with
    after [ o;
      Go:
        objectloop (o ofclass Sonido && o in self) {
          o.cambiar_volumen();
        }
    ];


Class Sonido
  with
    cambiar_volumen [;
      Damusix.VolumenCanal(self.canal, self.volumen());
    ],
    sonando [;
      return Damusix.SonandoDeFondoCanal(self.canal);
    ],
    tocar_sonido [ snd;
      Damusix.AsignarCanal(snd, self.canal, self.volumen(),
                           SONIDO_BUCLE_INFINITO);
      Damusix.TocarCanal(self.canal);
    ],
    parar_sonido [;
      Damusix.PararCanal(self.canal);
    ];


!Class MensajesSecuencia
!  with
!    contador -1,
!    total [;
!      return self.#mensajes / WORDSIZE;
!    ],
!    acabado [;
!      return self.contador == self.total() - 1;
!    ],
!    siguiente [
!      t r;
!      t = self.total();
!      if (t == 0) {
!        "*** ERROR: SECUENCIA DE MENSAJES VACÍA ***";
!      } else if (self.contador < t - 1) {
!        self.contador++;
!        r = self.&mensajes-->(self.contador);
!        return r;
!      } else {
!        return self.&mensajes-->(t - 1);
!      }
!    ];


!===============================================================================
! (8) Objetos del Juego
!-------------------------------------------------------------------------------


! ====================================================================
! HABITACIONES
! ====================================================================

! ---------------------------------------------
! PRÓLOGO
! ---------------------------------------------


Object cuarto_katie "Tu habitación"
  class LugarCasaKatie
  with
    description "Típica habitación de adolescente.",
    out_to pasillo_katie,
    sgw_img Oscuridad_jpg;
!    sgw_mus TV_Fondo_ogg;


Object pasillo_katie "Pasillo del piso superior"
  class LugarCasaKatie
  with
    description "El pasillo del piso superior.",
    in_to cuarto_katie,
    d_to cocina_katie,
    sgw_img Oscuridad_jpg;

    
Object cocina_katie "Cocina"
  class LugarCasaKatie
  with
    description "La cocina.",
    u_to pasillo_katie,
    s_to salon_katie,
    sgw_img Oscuridad_jpg,
    before [;
      Go:
        if (noun == u_obj) {
          if ((~~(sonido_telefono_katie.sonando())) && tv_katie.enchufado) {
            switch (tv_katie.encendidos) {
              0: if (tv_katie has on) {
                   tv_katie.apagar();
                   print "De pronto, la televisión se apaga, y tras unos
                          instantes, se enciende con nieve.^";
                   KeyDelay();
                   tv_katie.encender();
                   rtrue;
                 } else {
                   tv_katie.encender();
                   "Se enciende la tele.";
                 }
              1: if (tv_katie has on) {
                   "Algo te dice que no quieres dejar el televisor encendido.";
                 } else {
                   tv_katie.encender();
                   "El televisor se vuelve a encender.";
                 }
            }
          }
        }
    ];


Object salon_katie "Salón"
  class LugarCasaKatie
  with
    description "El salón.",
    n_to cocina_katie,
    sgw_img Oscuridad_jpg;
    
    
! ====================================================================
! OBJETOS QUE LLEVAN LOS PERSONAJES AL EMPEZAR
! ====================================================================


! ====================================================================
! OTROS OBJETOS
! ====================================================================


Object telefono_katie "teléfono" cocina_katie
  with
    name 'telefono' 'auricular' 'tlf',
    description "El teléfono de la casa de Katie.",
    initial "Ves tu teléfono.",
    sonando [;
      return sonido_telefono_katie.sonando();
    ],
    descolgar [;
      sonido_telefono_katie.parar(true);
      remove becca;
      becca_ausente.found_in = true;
      move becca_ausente to LugarReal();
      move charco_katie to pasillo_katie;
      move puerta_katie to pasillo_katie;
    ],
    becca_lo_coge [;
      telefono_katie.descolgar();
      "Becca coge el teléfono y te lo da, oyes a tu madre. Luego ella se va.";
    ],
    before [;
      Take, Descolgar:
        if (self.sonando()) {
          self.descolgar();
          "Descuelgas el auricular y oyes a tu madre.";
        } else {
          "Descuelgas y no oyes nada. Ni siquiera el tono de marcado.";
        }
      Drop, Colgar:
        "El teléfono ya está colgado.";
    ],
  has
    static;


Object tv_katie "televisor" salon_katie
  with
    name_f 'tv' 'television' 'tele',
    name_m 'televisor',
    description [;
      print "El televisor. Está ";
      if (self has on) print "encendido";
      else             print "apagado";
      print " y ";
      if (self.enchufado) "enchufado.";
      else                "desenchufado.";
    ],
    initial "Ves el televisor.",
    time_left,
    time_out [;
      self.encender();
      "^Se vuelve a encender el televisor.";
    ],
    enchufado true,
    encendidos 0,
    encender [ sw;
      give self on;
      sonido_tv_katie.sonar(sw);
      if (~~sw) self.encendidos++;
    ],
    apagar [;
      give self ~on;
      sonido_tv_katie.parar();
    ],
    before [;
      Examine:
        PrintOrRun(self, description);
        rtrue;

      SwitchOn:
        if (~~(self.enchufado))
          "No se puede encender porque está desenchufado.";
        if (self has on) "Ya está encendido.";
        self.encender(true);
        "Enciendes el televisor.";
        
      SwitchOff:
        if (~~(self.enchufado))
          "Ya está desenchufado.";
        if (self hasnt on) "Ya está apagado.";
        self.apagar();
        "Apagas el televisor.";

!      Tie:
!        if (self.enchufado) {
!          "El televisor ya está enchufado.";
!        } else {
!          self.enchufado = true;
!          "Enchufas el televisor.";
!        }

!      Desenchufar:
!        if (~~(self.enchufado)) {
!          "El televisor ya está desenchufado.";
!        } else {
!          self.enchufado = false;
!          if (self has on) {
!            self.apagar();
!            "Desenchufas el televisor. Al hacerlo, la pantalla se apaga.";
!          } else {
!            "Desenchufas el televisor.";
!          }
!        }     
    ],
    after [;
      SwitchOn:
        self.encender();
        StopTimer(self);
        "Enciendes el televisor.";

      SwitchOff:
        self.apagar();
        if (self.encendidos == 1) {
          StartTimer(self, 3);
        }
        "Apagas el televisor.";
    ],
  has
    static switchable;


Object charco_katie "charco de agua"
  with
    name 'charco' 'agua',
    description "Un charco de agua cada vez más grande en el suelo que
                 proviene de tu habitación.",
    initial "Hay un charco de agua en el suelo.",
  has
    static;


Object puerta_katie "puerta de tu habitación"
  with
    name 'puerta' 'habitacion',
    article "la",
    description "La puerta de la habitación, cerrada, con agua saliendo por
                 debajo y goteando por el pomo.",
    initial "La puerta de tu habitación está cerrada y tiene luz por debajo.",
    add_to_scope pomo_puerta_katie,
    react_before [;
      Examine, Take:
        rfalse;
        
      default:
        if (noun == pomo_puerta_katie) {
          noun = puerta_katie;
          rfalse;
        }
    ],
    before [;
      Examine:
        PrintOrRun(self, description);
        rtrue;
        
      Open:
        "Abres la puerta, y mueres.";
        
      default:
        "No puedes hacer eso con la puerta.";
    ],
  has
    static female openable;


Object pomo_puerta_katie "pomo de la puerta"
  with
    name 'pomo' 'picaporte',
    description "El pomo de la puerta, goteando.",
    before [;
      Examine:
        PrintOrRun(self, description);
        rtrue;

      Take:
        <<Open puerta_katie>>;
    ],
  has
    static;


! ====================================================================
! PERSONAJES
! ====================================================================


Object becca "Becca" cuarto_katie
  class Movil
  with
    name 'becca',
    description "Es Becca.",
    initial "^Junto a ti está Becca.",
    describe [;
      "^Aquí está Becca.";
    ],
    before [;
      Llamar:
        "Estoy aquí... ¿No me ves?";
    ],
    life [;
      Ask:
        HablaBecca("No entiendo qué quieres decirme.");
        rtrue;
    ],
    orders [;
      Go, GoIn, Enter, Exit:
        HablaBecca("No pienso ir sola a ninguna parte.");
        rtrue;
        
      Take:
        if (noun == telefono_katie) {
          if (LugarReal() == cocina_katie) {
            telefono_katie.becca_lo_coge();
            rtrue;
          } else {
            HablaBecca("¿Dónde está el teléfono?");
            rtrue;
          }
        }

      NotUnderstood, Tell:
        <<Ask self>>;

      default:
        HablaBecca("Mejor hazlo tú misma.");
        rtrue;
    ],
  has
    animate proper;


Object becca_ausente "Becca ausente"
  with
    name 'becca',
    description "No ves a Becca por ninguna parte. ¿Estará en tu habitación?",
    found_in false,
    before [;
      Llamar:
        "Llamas a Becca, pero no obtienes respuesta.";

      Gritar:
        "Gritas el nombre de Becca, sin obtener respuesta.";

      default:
        "Becca no está.";
    ],
    life [;
      Ask:
        "Nadie responde.";
    ],
    orders [;
      NotUnderstood, Tell:
        <<Ask self>>;

      default:
        "No ves a Becca por ninguna parte.";
    ],
  has
    animate concealed;

    
! ====================================================================
! GESTORES DE TIMER
! ====================================================================


Object timer_telefono_katie
  class GestorTimer
  with
    duracion TIMER_DURACION_TLF_KATIE,
    condicion [;
      return sonido_telefono_katie.sonando();
    ],
    evento [;
      if (sonido_telefono_katie.time_left <= 0) {
        sonido_telefono_katie.time_left = sonido_telefono_katie.duracion_alarma;
        sonido_telefono_katie.time_out();
      } else {
        sonido_telefono_katie.time_left--;
      }
    ];

    
Object timer_becca
  class GestorTimer
  with
    duracion TIMER_DURACION_BECCA,
    condicion [;
      return sonido_telefono_katie.sonando();
    ],
    evento [;
      sonido_telefono_katie.each_turn();
    ];

! ====================================================================
! OBJETOS DE SOPORTE
! ====================================================================


Object barra_estado
  class objeto_barra_estado
  with
    modo BE_COMPUESTO,
    disposicion
      1  1 true BE_LOCALIDAD
      68 1 true BE_TURNOS,
    lineas_inv
      BE_INV_TOTAL;


!Object tt_computadora
!  class MiTeletipo
!  private
!    sonido 1,
!    elementos
!      "" POR_LETRA LETRA_FIJA SIN_PAUSA;

      
!Object tt_inicio
!  class MiTeletipo
!  private
!    sonido 1,
!    PausaMensaje 250,
!    elementos
!      "Miles de millones de kilómetros me separan del lugar en el que fui
!       creado."
!        POR_MENSAJE LETRA_NORMAL PAUSA_NORMAL
!      "^Llevo incontables ciclos de tiempo viajando"
!        POR_MENSAJE LETRA_NORMAL PAUSA_NORMAL
!      "^para cumplir la misión que le da sentido a mi existencia."
!        POR_MENSAJE LETRA_NORMAL PAUSA_NORMAL
!      "^Y ahora, por fin..."
!        POR_MENSAJE LETRA_NORMAL PAUSA_NORMAL
!      "^El viaje termina."
!        POR_MENSAJE LETRA_NORMAL PAUSA_NORMAL;


Object sonido_telefono_katie
  class Sonido
  with
    found_in cuarto_katie pasillo_katie cocina_katie salon_katie,
    canal CANAL_TELEFONO,
    duracion_alarma 10,
    time_left,
    time_out [;
      if (self.sonando()) {
        StartTimer(self, self.duracion_alarma);
        self.avisar_que_suena();
      }
    ],
    avisar_que_suena [;
      ControlTimer.PrepararImpresion();
      "^El teléfono sigue sonando.";
    ],
    volumen [
      l v;
      l = LugarReal(); 
      if (l == cocina_katie)       v = VOLUMEN_TELEFONO;
      else if (l == salon_katie)   v = VOLUMEN_TELEFONO / 2;
      else if (l == pasillo_katie) v = VOLUMEN_TELEFONO / 2;
      else if (l == cuarto_katie)  v = VOLUMEN_TELEFONO / 4;
      else                         v = 0;
      return v;
    ],
    sonar [ sw;
      self.tocar_sonido(Telefono1_ogg);
      StartTimer(self, self.duracion_alarma);
      if (~~sw) "Comienza a sonar el teléfono en la planta baja.";
    ],
    parar [ sw;
      self.parar_sonido();
      StopTimer(self);
      if (~~sw) "El teléfono deja de sonar.";
    ],
    each_turn [;
      if (self.sonando()) {
        if (becca in cocina_katie && random(100) < 10 &&
            msg_becca.at_end()) {
          ControlTimer.PrepararImpresion();
          HablaBecca("Venga ya, esto es absurdo...");
          new_line;
          telefono_katie.becca_lo_coge();
        } else if (random(100) < 20) {
          ControlTimer.PrepararImpresion();
          HablaBecca(msg_becca.run_script());
        }
      }
    ],
  has
    concealed;


Object msg_becca
  class StopEventList
  with
    event_list "Katie... Está sonando el teléfono..."
               "¿Qué pasa? ¿No lo coges?"
               "¿Por qué no lo coges?"
               "¡Pero cógelo ya! ¿Tienes miedo o qué?";
  

!Object msg_becca
!  class MensajesSecuencia
!  with
!    mensajes "Katie... Está sonando el teléfono..."
!             "¿Qué pasa? ¿No lo coges?"
!             "¿Por qué no lo coges?"
!             "¡Pero cógelo ya! ¿Tienes miedo o qué?";


Object sonido_tv_katie
  class Sonido
  with
    found_in salon_katie cocina_katie pasillo_katie,
    canal CANAL_TV,
    volumen [
      l v;
      l = LugarReal(); 
      if (l == salon_katie)        v = VOLUMEN_TV;
      else if (l == cocina_katie)  v = VOLUMEN_TV / 2;
      else if (l == pasillo_katie) v = VOLUMEN_TV / 4;
      else                         v = 0;
      return v;
    ],
    sonar [ sw
      snd;
      if (sw) snd = TV_Fondo_ogg;
      else    snd = Ruido_TV_ogg;
      self.tocar_sonido(snd);
    ],
    parar [;
      self.parar_sonido();
    ],
  has
    concealed; 


! ====================================================================
! TEMAS RAIZ
! ====================================================================


! Cuidado con los infinitivos. Si pones un infinitivo aquí, luego no se puede
! usar como verbo


! ====================================================================
! MENÚS ZIPI
! ====================================================================


[ ZIPI_RunOtro _o
  r;
  ZIPI_PintaTitulo(_o.ZIPI_titulo);
  print "^";
  r = _o.ZIPI_ejecutar();
  if (~~r) ZIPI_Espera();
  return r;
];


[ ZIPI_RunMenu _m top
  i j count cur key target redibujar ft r;

  redibujar = 1;
  cur = 0;
  count = _m.#ZIPI_item / WORDSIZE; count = count + 2;
  ft = true;

  for (::) {
    if (redibujar) {
      ZIPI_PintaTitulo(_m.ZIPI_titulo);
      redibujar = 0;
    }

    for (i = 0: i < count - 2: i++) {
      j = i + 3;
      ZIPI_setcursor(5,j);
!      if (ft && hayTeletipo) {
!        tt_computadora.visualiza((_m.&ZIPI_item-->i).ZIPI_titulo);
!      } else {
        style fixed;
        if ((_m.&ZIPI_item-->i).ZIPI_titulo ofclass Routine)
          (_m.&ZIPI_item-->i).ZIPI_titulo();
        else print (string) (_m.&ZIPI_item-->i).ZIPI_titulo;
        style roman;
!      }
    }

    j = i + 4;
    ZIPI_setcursor(5, j);

!    if (ft) {
!      if (top) tt_computadora.visualiza("Salir");
!      else     tt_computadora.visualiza("Volver");
!    } else {
      if (top) print (s_pref) "Salir";
      else     print (s_pref) "Volver";
!    }

    ft = false;
    j = cur + 3;
    ZIPI_setcursor(2, j);
    print ">";
    ZIPI_setcursor(2, j);
    key = ZIPI_tecla();
    print " ";

    if (key > ZIPI_EVENTO_HYPER) {
      cur = key - ZIPI_EVENTO_HYPER - 2;
      if (cur == -1) key = 27;
      else           key = 13;
    }

    switch(key) {
      'k', 'p', '-', '_', 129, -4:
        do {
          cur--;
          if (cur == count - 2) cur--;
          if (cur < 0) cur = count - 1;
        } until ((_m.&ZIPI_item-->cur) ~= ZIPI_Separador);
        break;
      'j', 'n', '=', '+', 130, -5:
        do {
          cur++;
          if (cur == count - 2) cur++;
          if (cur >= count) cur = 0;
        } until ((_m.&ZIPI_item-->cur) ~= ZIPI_Separador);
        break;
      'q', 'Q', 27, 131, 10, 8, -2:
        rfalse;
 
      132, 13, 'n', ' ', -3, -6:
        if (cur == count - 1) rfalse;
        if (cur == count - 2) break;
        target = _m.&ZIPI_item-->cur;
        if (target ofclass ZIPI_Menu)          ZIPI_RunMenu(target);
        else if (target ofclass ZIPI_Pista)    ZIPI_RunPista(target);
        else if (target provides ZIPI_cambiar) target.ZIPI_cambiar();
        else {
          r = ZIPI_RunOtro(target);
          if (target == ZIPI_Restaurar) return 3;
          if (r == 2) return r;
        }
        redibujar = 1;
        break;
    }
  }
  rfalse;
];


Object ZIPI_Menu_Principal
  class ZIPI_Menu
  with
    ZIPI_titulo "EL CÍRCULO - (c) Alpha Aventuras 2012",
    ZIPI_item
      ZIPI_Jugar_Con_Intro
      ZIPI_Jugar_Sin_Intro
      ZIPI_Restaurar
      ZIPI_Configuracion
      ZIPI_Separador
      ZIPI_Menu1;

      
Object ZIPI_Configuracion
  class ZIPI_Menu
  with
    ZIPI_titulo "Opciones de gráficos y sonido",
    ZIPI_item
      ZIPI_Graficos
      ZIPI_Tamano_Graficos
      ZIPI_Sonido
      ZIPI_Sonido_Fondo
      ZIPI_Separador
      ZIPI_Accesibilidad;

      
Object ZIPI_Graficos
  class ZIPI_Otro
  with
    ZIPI_titulo [;
      if (hayGraficos) "Gráficos: SÍ (recomendado)";
      else             "Gráficos: NO";
    ],
    ZIPI_cambiar [;
      hayGraficos = ~~hayGraficos;
    ],
    ZIPI_ejecutar [; rtrue; ];

    
Object ZIPI_Tamano_Graficos
  class ZIPI_Otro
  with
    ZIPI_titulo [;
      switch (altoVentanaGrafica) {
        GRAFICOS_MINUSCULOS: "Tamaño de gráficos: ",
                             GRAFICOS_MINUSCULOS, " px. (MINÚSCULOS)";
        GRAFICOS_PEQUENOS:   "Tamaño de gráficos: ",
                             GRAFICOS_PEQUENOS, " px. (PEQUEÑOS)";
        GRAFICOS_MEDIANOS:   "Tamaño de gráficos: ",
                             GRAFICOS_MEDIANOS, " px. (MEDIANOS, recomendado)";
        GRAFICOS_GRANDES:    "Tamaño de gráficos: ",
                             GRAFICOS_GRANDES,  " px. (GRANDES)";
        default:             "Tamaño de gráficos: ",
                             altoVentanaGrafica, " px.";          
      }
    ],
    ZIPI_cambiar [;
      if (altoVentanaGrafica < GRAFICOS_GRANDES)
        altoVentanaGrafica = altoVentanaGrafica + 50;
      else
        altoVentanaGrafica = GRAFICOS_MINUSCULOS;
    ],
    ZIPI_ejecutar [; rtrue; ];

    
Object ZIPI_Sonido
  class ZIPI_Otro
  with
    ZIPI_titulo [;
      if (haySonido) "Sonido global: SÍ (recomendado)";
      else           "Sonido global: NO";
    ],
    ZIPI_cambiar [;
      haySonido = ~~haySonido;
      if (haySonido) Damusix.ActivarAudio();
      else           Damusix.DesactivarAudio();
    ],
    ZIPI_ejecutar [; rtrue; ];

    
Object ZIPI_Sonido_Fondo
  class ZIPI_Otro
  with
    ZIPI_titulo [;
      if (haySonidoFondo) "Sonido de fondo: SÍ (recomendado)";
      else                "Sonido de fondo: NO";
    ],
    ZIPI_cambiar [;
      haySonidoFondo = ~~haySonidoFondo;
      if (haySonidoFondo) {
        Damusix.VolumenCanal(CANAL_FONDO, VOLUMEN_FONDO);
      } else {
        Damusix.VolumenCanal(CANAL_FONDO, 0);
      } 
    ],
    ZIPI_ejecutar [; rtrue; ];


Object ZIPI_Accesibilidad
  class ZIPI_Menu
  with
    ZIPI_titulo "Opciones de accesibilidad",
    ZIPI_item
!      ZIPI_Efecto_Teletipo
      ZIPI_Tiempo_Real;

    
!Object ZIPI_Efecto_Teletipo
!  class ZIPI_Otro
!  with
!    ZIPI_titulo [;
!      if (hayTeletipo) "Efecto teletipo: SÍ (recomendado)";
!      else             "Efecto teletipo: NO";
!    ],
!    ZIPI_cambiar [;
!      hayTeletipo = ~~hayTeletipo;
!    ],
!    ZIPI_ejecutar [; rtrue; ];


Object ZIPI_Tiempo_Real
  class ZIPI_Otro
  with
    ZIPI_titulo [;
      if (hayTiempoReal) "Tiempo real: SÍ (recomendado)";
      else               "Tiempo real: NO";
    ],
    ZIPI_cambiar [;
      hayTiempoReal = ~~hayTiempoReal;
    ],
    ZIPI_ejecutar [; rtrue; ];

    
Object ZIPI_Jugar_Con_Intro
  class ZIPI_Otro
  with
    ZIPI_titulo "Comenzar la aventura con introducción",
    ZIPI_ejecutar [;
      StatusLineHeight(1);
      glk($002A, gg_statuswin);  ! window_clear
      glk($002F, gg_mainwin);    ! set_window
      if (hayGraficos) EncenderGraficos();
      else             ApagarGraficos();
      clearTextWindow();
      Introduccion();
      IniciarAventura();
      dibujarEstado = true;
      return 2;
    ];

    
Object ZIPI_Jugar_Sin_Intro
  class ZIPI_Otro
  with
    ZIPI_titulo "Comenzar la aventura saltando la introducción",
    ZIPI_ejecutar [;
      StatusLineHeight(1);
      glk($002A, gg_statuswin);  ! window_clear
      glk($002F, gg_mainwin);    ! set_window
      if (hayGraficos) EncenderGraficos();
      else             ApagarGraficos();
      clearTextWindow();
      IniciarAventura(true);
      dibujarEstado = true;
      return 2;
    ];

    
Object ZIPI_Restaurar
  class ZIPI_Otro
  with
    ZIPI_titulo "Restaurar una partida guardada",
    ZIPI_ejecutar [ res fref;
      StatusLineHeight(1);
      clearTextWindow();
      glk($002F, gg_mainwin);    ! set_window
      ImprimirPrompt();
      fref = glk($0062, $01, $02, 0); ! fileref_create_by_prompt
      if (fref == 0) jump RFailed;
      gg_savestr = glk($0042, fref, $02, GG_SAVESTR_ROCK); ! stream_open_file
      glk($0063, fref); ! fileref_destroy
      if (gg_savestr == 0) jump RFailed;

      @restore gg_savestr res;

      glk($0044, gg_savestr, 0); ! stream_close
      gg_savestr = 0;

    .RFailed;
      glk($002F, gg_statuswin);
      StatusLineHeight(24);
      print "^Error: no se ha podido cargar la partida.";
      rfalse;
    ];


Object ZIPI_Salir
  class ZIPI_Otro
  with
    ZIPI_titulo "Salir",
    ZIPI_ejecutar [;
      quit;
    ];


!===============================================================================
! (9) Otras Rutinas Reemplazadas; Rutinas Propias del Juego
!-------------------------------------------------------------------------------


[ HablaKatie msg;
  HablaPSI("KATIE", msg);
];


[ HablaBecca msg;
  HablaPSI("BECCA", msg);
];


[ HablaPSI psi msg;
  print_ret "^", (s_user1) psi, ": ~", (string) msg, "~";
];


[ MostrarImagenGradualmente imagen veces retardo
  i;
  for (i = 0 : i < veces : i++) {
    viewImageCenter(imagen, true);
    KeyDelay(retardo);
  }  
];


[ ImprimirPrompt;
  print (s_input) "^> ";
];


[ hueles_ x;
  if (player provides persona) {
    switch (player.persona) {
      PRIMERA_PERSONA,
      PRIMERA_PERSONA_SINGULAR: print "huelo";
      SEGUNDA_PERSONA,
      SEGUNDA_PERSONA_SINGULAR: print "hueles";
      TERCERA_PERSONA,
      TERCERA_PERSONA_SINGULAR: print "huele";
      PRIMERA_PERSONA_PLURAL:   print "olemos";
      SEGUNDA_PERSONA_PLURAL:   print "oléis";
      TERCERA_PERSONA_PLURAL:   print "huelen";
      default:                  print "hueles";
    }
  } else print "hueles";
  print (string) x;
];


[ IniciarGraficosSonidos;
  if (~~testGraphics()) {
    print "^Lo sentimos, pero este juego necesita un intérprete Glulx
            con capacidades gráficas.^^";
    RecomiendaGargoyle();
  }

  if (Damusix.TestAudio() == 0) {
    print "^Lo sentimos, pero este juego necesita un intérprete Glulx
            que pueda reproducir sonido.^^";
    RecomiendaGargoyle();
  }

  if (glk_gestalt(gestalt_Timer,0) == 0) {
    print "^Lo sentimos, pero este juego necesita un intérprete Glulx
            que tenga soporte para eventos temporizados.^^";
    RecomiendaGargoyle();
  }

  ! Inicialización sonora
  IniciarSonidos();

  ! Inicialización gráfica
  initializeSGW(altoVentanaGrafica);
];


[ RecomiendaGargoyle;
  print "~El círculo~ ha sido diseñada
         para funcionar con el intérprete Gargoyle, que puedes
         descargar de la siguiente dirección:^^",
         (s_pref) "http://code.google.com/p/garglk/downloads^";
  KeyDelay();
  quit;
];


[ IniciarSonidos;
  Damusix.VolumenCanal(CANAL_FONDO, VOLUMEN_FONDO);
!  Damusix.VolumenCanal(CANAL_DETECTOR, VOLUMEN_DETECTOR);
!  Damusix.AsignarCanal(Teletipo_ogg, CANAL_TELETIPO, VOLUMEN_TELETIPO, SONIDO_BUCLE_INFINITO);
!  Damusix.AsignarCanal(Tic_ogg, CANAL_TICTAC, VOLUMEN_TICTAC, SONIDO_BUCLE_INFINITO);
];

[ ComoHablar;
  print_ret "[Para hablar con un personaje, usa la forma ~",
            (s_input) "PERSONAJE, lo que sea", "~. Por ejemplo: ~",
            (s_input) "JASON, QUÉ OPINAS DE MADRE", "~.]";
];


[ Introduccion
  v;
  clearMainWindow();
  viewImageCenter(Oscuridad_jpg);

  v = Damusix.QueVolumenCanal(CANAL_FONDO);
  Damusix.AsignarCanal(Grillos_ogg, CANAL_FONDO, 0, SONIDO_BUCLE_INFINITO);
  Damusix.TocarCanal(CANAL_FONDO);
  Damusix.SimpleFadeIn(Grillos_ogg, 2000, 50);

  if (hayGraficos) {
    glk_window_close(gg_bigwin, 0);
    gg_bigwin = glk_window_open(gg_mainwin,
                                winmethod_Above + winmethod_Proportional, 100,
                                wintype_Graphics, GG_BIGWIN_ROCK);
    MostrarImagenGradualmente(Prologo_png, 30, 10);
    KeyDelay(300);
    MostrarImagenGradualmente(Fundido_png, 40, 5);
  } else {
    print "Prólogo";
  }
  
  openGraphicWindow(altoVentanaGrafica);
!  print "Copyright (c) 2008-2012 Alpha Aventuras";
!  KeyDelay();
!  clearMainWindow();
  ! Desde el primer momento, dibujamos la primera pantalla y activamos el timer:
!  viewImageCenter(Nave1_jpg);
  ! Aquí iría la introducción en la que Katie y Becca hablan
  ConversacionKatieBecca();
  
  if (v ~= 0) {
    glk($00D6, 500);                      ! request_timer_events
    glk($00D2, gg_mainwin);               ! glk_request_char_event(gg_mainwin);
    while (1) {
      glk($00C0, gg_arguments);           ! glk_select(gg_arguments);
      switch (gg_arguments-->0) {
        evtype_CharInput:
          glk($00D3, gg_mainwin);         ! cancel_char_event
!          Damusix.SimpleFadeOut(Intro_ogg, 3000);
!          Damusix.PararCanal(CANAL_FONDO);
!          Damusix.VolumenCanal(CANAL_FONDO, v);
          jump Exit;

        evtype_Timer:
          glk($00D6, 500);                ! request_timer_events

        evtype_SoundNotify:
          glk($00D6, 0);                  ! request_timer_events
          jump Exit;
      }
    }
  }
.Exit;
  rfalse;
];


[ ConversacionKatieBecca
  esp;
  esp = 1000;
  print "Condado de Eola.";
  KeyDelay(600);
  print " Diez menos cuarto de la noche.";
  KeyDelay(600);
  Damusix.VolumenCanal(CANAL_FONDO, 10);
  Damusix.AsignarCanal(TV_Fondo_ogg, CANAL_TV, VOLUMEN_TV);
  Damusix.TocarCanal(CANAL_TV);
  new_line;
  HablaBecca("La tele es un rollo. Toma: pon lo que quieras.");
  KeyDelay(esp);
  HablaKatie("No hay nada que me guste.");
  Damusix.PararCanal(CANAL_TV);
  KeyDelay(esp);
  HablaBecca("¿Sabes lo de la cinta?");
  KeyDelay(esp);
  HablaKatie("¿Qué cinta?");
  KeyDelay(esp);
  HablaBecca("Esa que te mata cuando la ves.");
  new_line;
];


[ Bandera_Fin bf;
  rfalse;
];


#ifndef LugarReal;
[ LugarReal;
  if (location == thedark) return real_location;
  else                     return location;
];
#endif;


[ EncenderGraficos t;
  hayGraficos = true;
  openGraphicWindow(altoVentanaGrafica);
  clearGraphicWindow();
  if (location ~= thedark) {
    if (LugarReal() provides sgw_img) viewImageCenter(LugarReal().sgw_img);
    else                              viewImageCenter(Logo_Alpha_Aventuras_jpg);
  }
  if (t) {
    glk_set_style(style_Emphasized);
    print "[Gráficos activados (tamaño ";
    switch (altoVentanaGrafica) {
      GRAFICOS_PEQUENOS: print "pequeño";
      GRAFICOS_MEDIANOS: print "mediano";
      GRAFICOS_GRANDES:  print "grande";
      default:           print altoVentanaGrafica, " px";
    }
    print ").]^";
    style roman;
  }
];


[ ApagarGraficos t;
  hayGraficos = false;
  closeGraphicWindow();
  if (t) print (s_emph) "[Gráficos desactivados.]^";
];


!===============================================================================
! (10) Verbos y Gramaticas Propias del Juego
!-------------------------------------------------------------------------------


Verb meta 'graficos'
  *                           -> Graficos
  * 'on'/'encendido'/'si'     -> EncenderGraficos
  * 'off'/'apagado'/'no'/'nx' -> ApagarGraficos
  * 'pequenos'                -> GraficosPequenos
  * 'medianos'                -> GraficosMedianos
  * 'grandes'                 -> GraficosGrandes;

Verb meta 'configuracion'
  *                           -> Configuracion;

Verb meta 'sonido' 'sonidos'
  *                                   -> Sonido
  * 'on'/'encendido'/'si'             -> EncenderSonido
  * 'off'/'apagado'/'no'/'nx'         -> ApagarSonido
  * 'fondo'                           -> Musica
  * 'fondo' 'on'/'encendido'/'si'     -> EncenderMusica
  * 'fondo' 'off'/'apagado'/'no'/'nx' -> ApagarMusica;

Verb meta 'musica'
  *                                   -> Musica
  * 'fondo' 'on'/'encendida'/'si'     -> EncenderMusica
  * 'fondo' 'off'/'apagada'/'no'/'nx' -> ApagarMusica
  * 'on'/'encendida'/'si'             -> EncenderMusica
  * 'off'/'apagada'/'no'/ 'nx'        -> ApagarMusica;

Verb meta 'pistas'
  *                 -> Pistas
  * 'no' / 'nx'     -> PistasNo;

Verb meta 'creditos'
  *                 -> Creditos;

Verb 'descuelga'
  * noun            -> Descolgar;

VerboIrregular "descolgar" with imperativo 'descuelga';

Verb 'cuelga'
  * noun            -> Colgar;

VerboIrregular "colgar" with imperativo 'cuelga';

Verb 'desenchufa'
  * noun            -> Desenchufar;

VerboIrregular "desenchufar" with imperativo 'desenchufa';

Extend 'grita' first
  *                 -> Gritar
  * 'a//' creature  -> Gritar;

Verb 'chilla' = 'grita';

Verb 'llama'
  *                 -> Llamar
  * 'a//' creature  -> Llamar
  * 'por' noun      -> LlamarPor;


!===============================================================================
! (11) Rutinas de Acciones Propias del Juego
!-------------------------------------------------------------------------------


[ ConfiguracionSub
  fondo v m;
  ControlTimer.PausarTick();
  if (hayGraficos) {
    ApagarGraficos(true);
    hayGraficos = true;
  }
  fondo = Damusix.SonandoDeFondoCanal(CANAL_FONDO);
  barra_estado.numero_lineas = 26;
  barra_estado.dibujar();
  clearMainWindow();
  
  ZIPI_RunMenu(ZIPI_Configuracion, true);
  
  v = Damusix.QueVolumenCanal(CANAL_FONDO);
  m = LugarReal().sgw_mus;
  if (fondo && haySonidoFondo && v ~= 0 && ~~(Damusix.SonandoDeFondo(m))) {
    Damusix.AsignarCanal(m, CANAL_FONDO, v, SONIDO_BUCLE_INFINITO);
    Damusix.TocarCanal(CANAL_FONDO);
  }
  barra_estado.numero_lineas = 1;
  barra_estado.dibujar();
  if (hayGraficos) EncenderGraficos(true);
  clearTextWindow();
  ControlTimer.ReanudarTick();
  <<Look>>;
];


[ GraficosSub;
  print (s_emph) "[Por favor, usa la forma ~", (s_input) "GRAFICOS SI",
        (s_emph) "~ o ~", (s_input) "GRAFICOS NO", (s_emph) "~ para activar o
        desactivar, respectivamente, el uso de gráficos. También puedes
        cambiar el tamaño de la ventana gráfica usando ~",
        (s_input) "GRAFICOS PEQUEÑOS", (s_emph) "~, ~",
        (s_input) "GRAFICOS MEDIANOS", (s_emph) "~ o ~",
        (s_input) "GRAFICOS GRANDES", (s_emph) "~.]^";
];


[ GraficosPequenosSub;
  altoVentanaGrafica = GRAFICOS_PEQUENOS;
  EncenderGraficosSub();
];

[ GraficosMedianosSub;
  altoVentanaGrafica = GRAFICOS_MEDIANOS;
  EncenderGraficosSub();
];


[ GraficosGrandesSub;
  altoVentanaGrafica = GRAFICOS_GRANDES;
  EncenderGraficosSub();
];


[ EncenderGraficosSub;
  EncenderGraficos(true);
];


[ ApagarGraficosSub;
  ApagarGraficos(true);
];


[ SonidoSub;
  print (s_emph) "[Por favor, usa la forma ~", (s_input) "SONIDO SI",
        (s_emph) "~ o ~", (s_input) "SONIDO NO",
        (s_emph) "~ para activar o desactivar, respectivamente,
                  todos los efectos sonoros.]^";
];


[ MusicaSub;
  print (s_emph) "[Por favor, usa la forma ~", (s_input) "SONIDO FONDO SI",
        (s_emph) "~ o ~", (s_input) "SONIDO FONDO NO", (s_emph) "~ para activar
        o desactivar, respectivamente, el sonido de fondo.]^";
];


[ EncenderSonidoSub;
  haySonido = true;
  Damusix.ActivarAudio();
  print (s_emph) "[Activados todos los efectos sonoros.]^";
];


[ ApagarSonidoSub;
  haySonido = false;
  Damusix.DesactivarAudio();
  print (s_emph) "[Desactivados todos los efectos sonoros.]^";
];


[ EncenderMusicaSub i;
  haySonidoFondo = true;
  Damusix.VolumenCanal(CANAL_FONDO, VOLUMEN_FONDO);

  if (~~i) {
    print (s_emph) "[Activado el sonido de fondo.]^";
  }
];

  
[ ApagarMusicaSub;
  haySonidoFondo = false;
  Damusix.VolumenCanal(CANAL_FONDO, 0);
  print (s_emph) "[Desactivado el sonido de fondo.]^";
];


[ PistasSub
  v tlf tv fondo;
  switch (hayPistas) {
    0: hayPistas = 1;
       print (s_emph) "[Advertencia: Es sabido que la tentación de la ayuda es
             a veces tan fuerte que se suelen obtener pistas prematuramente.
             Por tanto, en cualquier momento durante el juego puedes poner ",
             (s_input) "PISTAS NO", (s_emph) ", y eso te impedirá obtener ayuda
             en la sesión de juego actual. Si sigues queriendo una pista, pon ",
             (s_input) "PISTAS", (s_emph) " otra vez.]^";
    1: ControlTimer.PausarTick();
       if (hayGraficos) {
         ApagarGraficos(true);
         hayGraficos = true;
       }
       barra_estado.numero_lineas = 26;
       barra_estado.dibujar();
       tlf = Damusix.SonandoDeFondoCanal(CANAL_TELEFONO);
       Damusix.PararCanal(CANAL_TELEFONO);
       tv = Damusix.SonandoDeFondoCanal(CANAL_TV);
       Damusix.PararCanal(CANAL_TV);
       fondo = Damusix.SonandoDeFondoCanal(CANAL_FONDO);
       v = Damusix.QueVolumenCanal(CANAL_FONDO);
       Damusix.AsignarCanal(Darkwalk_ogg, CANAL_FONDO, v,
                            SONIDO_BUCLE_INFINITO);
       Damusix.TocarCanal(CANAL_FONDO);
       
       ZIPI_Empezar();
       
       if (tlf) Damusix.TocarCanal(CANAL_TELEFONO);
       if (tv)  Damusix.TocarCanal(CANAL_TV);
       if (fondo) {
         v = Damusix.QueVolumenCanal(CANAL_FONDO);
         Damusix.AsignarCanal(LugarReal().sgw_mus, CANAL_FONDO, v,
                              SONIDO_BUCLE_INFINITO);
         Damusix.TocarCanal(CANAL_FONDO);
       } else {
         Damusix.PararCanal(CANAL_FONDO);
       }
       barra_estado.numero_lineas = 1;
       barra_estado.dibujar();
       if (hayGraficos) EncenderGraficos(true);
       clearTextWindow();
       ControlTimer.ReanudarTick();
       <<Look>>;
    2: print (s_emph) "[Las pistas han sido desactivadas.]^";
  }
];


[ PistasNoSub;
  switch (hayPistas) {
    2:       print (s_emph) "[Las pistas ya han sido desactivadas.]^";
    default: hayPistas = 2;
             print (s_emph) "[PISTAS desactivadas.]^";
  }
];


[ CreditosSub;
  viewImageCenter(Logo_Alpha_Aventuras_jpg);
  print (s_head) "^* EL CÍRCULO *^^";
  print "(c) 2012 Alpha Aventuras^^";
  print (s_bold) "- PROGRAMACIÓN Y DISEÑO:^";
  print "    Ricardo Pérez López^^";
  print (s_bold) "- GRÁFICOS:^";
  print "    Manuel Millán Ruiz^^";
  print (s_bold) "- TEXTOS:^";
  print "    Ricardo Pérez López^^";
  print (s_bold) "- MAPEADO Y DOCUMENTACIÓN:^";
  print "    Ricardo Pérez López^";
  print "    Antonio Matiola Ortiz^^";
  print (s_bold) "- PRUEBAS:^";
  print "    Ricardo Pérez López^";
  print "    Manuel Millán Ruiz^^";
  KeyDelay();
  print "Desarrollado usando el lenguaje Inform, de Graham Nelson,
         con ayuda de las siguientes librerías:^^";
  print "- INFSP6 (fix), de Sarganar et al.^";
  print "- Adaptación de SGW+DMX, de Eliuk Blau^";
  print "- Damusix, de Eliuk Blau^";
  print "- PNJactor_NG y PNJacciones_NG (adaptaciones de los originales de Zak
           y Carlos)^";
  print "- Rastros_NG (adaptación de Rastros, de Mel Hython)^";
  print "- Moviles_NG (adaptación de Moviles, de Mel Hython)^";
  print "- PNJpuertas_NG (Adaptación de PnjPuertas, de Jaevius)^";
  print "- Decir, de Zak^";
  print "- Etemas, de Zak^";
  print "- Decorado_NG (adaptación de Decorado, de Zak y Mel Hython)^";
  print "- Teletipo (adaptación de Escr, de Baltasarq)^";
  print "- Adaptación de Barra, de Presi^";
  print "- Adaptación de ZIPI, de Zak^";
  print "- Timer, de Sothoth";
  KeyDelay();
  print "^^Basado en la novela ~Ringu~ de Koji Suzuki y la película ~The Ring~
         de Gore Verbinsky.";
  print "^^Nuestro agradecimiento a todos los integrantes del CAAD que nos han
         ayudado, directa o indirectamente, en el desarrollo de esta aventura.^^
         (c) 2012 Alpha Aventuras^^
         Este programa es software libre, publicado bajo la licencia GNU GPL v3.
         El texto completo de la licencia se encuentra en la siguiente
         dirección:^^";
  print (s_pref) "http://www.gnu.org/licenses/gpl.txt^";
  print "^El código fuente del programa está disponible en Github:^^";
  print (s_pref) "https://github.com/ricpelo/alien/tree/deluxe^";
  KeyDelay();
  print "^Visítanos en:^^";
  print (s_pref) "http://www.alpha-aventuras.es^
        http://wiki.caad.es/Alpha_Aventuras^
        http://www.facebook.com/alphaaventuras^";
  KeyDelay();
  viewImageCenter(LugarReal().sgw_img);
];


[ DescolgarSub;
  "No tiene sentido descolgar eso.";
];


[ ColgarSub;
  "No tiene sentido colgar eso.";
];


[ DesenchufarSub;
  "No puedes desenchufar eso.";
];


[ SearchSub;
  <<Examine noun>>;
];


[ ConsultSub;
  <<Examine noun>>;
];


[ TellSub;
  ComoHablar();
];


[ AnswerSub;
  ComoHablar();
];


[ GritarSub;
  "Emites un espantoso alarido.";
];


[ LlamarSub;
  "¿Llamar a qué o a quién?";
];


[ LlamarPorSub;
  "Con eso no puedes llamar a ningún sitio.";
];


! Fin del código
